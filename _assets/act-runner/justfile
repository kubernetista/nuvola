# Justfile

# Variables

# List 📜 all recipes (default)
help:
    @just --list

# # Start 🚀 Gitea Runner with Docker compose
# start-runner:
#     sudo act_runner daemon --config ./config.yaml

# # Register the local Gitea Runner with the provided token
# register-runner token:
#     # sudo act_runner daemon --config ./config.yaml
#     act_runner register --config ./config.yaml --no-interactive --token {{token}} --instance https://git.localtest.me/

# # Register the local Gitea Runner and start it, getting the token from the Gitea Pod
# register-runner-auto:
#     #!/usr/bin/env bash
#     GITEA_POD_NAME=$(kubectl get pods -n git -l app.kubernetes.io/name=gitea -o jsonpath="{.items[0].metadata.name}")
#     GITEA_RUNNER_TOKEN=$(kubectl exec --stdin=true --tty=true -n git ${GITEA_POD_NAME} -c  gitea -- /bin/sh -c "gitea actions generate-runner-token")
#     echo "Retrieved token: ${GITEA_RUNNER_TOKEN}"
#     just register-runner ${GITEA_RUNNER_TOKEN}

# Variables
IMAGE_NAME := "act-runner-nuvola:latest"
# COMPOSE_CONFIG := "compose-scale.yaml"
COMPOSE_CONFIG := "compose-double.yaml"

start-runner:
    env $(teller env) docker compose -f {{COMPOSE_CONFIG}} up

start-runner-detached:
    env $(teller env) teller run -- docker compose -f {{COMPOSE_CONFIG}} up --detach

stop-runner:
    env $(teller env) teller run -- docker compose -f {{COMPOSE_CONFIG}} down

# Build the container image
build-container:
    docker compose -f {{COMPOSE_CONFIG}} build --build-arg GITEA_HOSTNAME="${GITEA_HOSTNAME}"

# Get runner registration token 🔑 from Gitea
get-runner-token:
    #!/usr/bin/env bash
    GITEA_RUNNER_REGISTRATION_TOKEN=$(kubectl exec -n git --stdin=true --tty=true $(kubectl get pods -n git -l 'app.kubernetes.io/name=gitea,app.kubernetes.io/component!=token-job,app.kubernetes.io/instance=gitea' -o name) -c gitea -- /bin/sh -c "gitea actions generate-runner-token" | tr -d '\r\n')
    echo ${GITEA_RUNNER_REGISTRATION_TOKEN} | tr -d '\n'

# Save the runner registration token 🔑 from Gitea to 🏦 Vault
save-runner-token:
    #!/usr/bin/env bash
    GITEA_RUNNER_REGISTRATION_TOKEN=$(kubectl exec -n git --stdin=true --tty=true $(kubectl get pods -n git -l 'app.kubernetes.io/name=gitea,app.kubernetes.io/component!=token-job,app.kubernetes.io/instance=gitea' -o name) -c gitea -- /bin/sh -c "gitea actions generate-runner-token" | tr -d '\r\n')
    vault kv put secret/gitea/runner-registration-token GITEA_RUNNER_REGISTRATION_TOKEN="${GITEA_RUNNER_REGISTRATION_TOKEN}"

# Unregister the local Gitea Runners
unregister-runners:
    @fd -u .runner ./data-{0,1,2}/ | xargs rm -fv
    @echo "Runners unregistered"

# Wait until the 'git' namespace is available
wait-for-gitea-server:
    #!/usr/bin/env bash
    GITEA_POD=$(kubectl get pods -n git -l 'app.kubernetes.io/name=gitea,app.kubernetes.io/component!=token-job,app.kubernetes.io/instance=gitea' -o name)
    echo "Waiting for the Gitea server to be ready..."
    kubectl wait --timeout=600s -n git --for=condition=ready ${GITEA_POD}
    # @until kubectl get namespace git >/dev/null 2>&1; do sleep 2; done && echo "Namespace 'git' is ready!"

# Force the full lifecycle of the Gitea Runner
full-runner-lifecycle: stop-runner unregister-runners wait-for-gitea-server save-runner-token start-runner-detached
